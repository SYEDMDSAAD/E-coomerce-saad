(function(global, factory) {
    // Check for module systems (AMD, CommonJS, or global object)
    if (typeof define === 'function' && define.amd) {
      // AMD module system
      define([], factory);
    } else if (typeof module === 'object' && module.exports) {
      // CommonJS module system
      module.exports = factory();
    } else {
      // Global object (browser)
      global.Rellax = factory();
    }
  })(
    // Use window for browser or global for Node.js-like environments
    typeof window !== 'undefined' ? window : global,
    
    // Factory function defining the Rellax library
    function() {
      var Rellax = function(selector, options) {
        // Helper function to validate breakpoints
        function validateBreakpoints() {
          if (a.options.breakpoints.length === 3 && Array.isArray(a.options.breakpoints)) {
            let validNumbers = true, inOrder = true, prev = null;
            
            a.options.breakpoints.forEach(function(breakpoint) {
              if (typeof breakpoint !== 'number') validNumbers = false;
              if (prev !== null && breakpoint < prev) inOrder = false;
              prev = breakpoint;
            });
            
            if (validNumbers && inOrder) return;
          }
          
          // Fallback to default breakpoints if validation fails
          a.options.breakpoints = [576, 768, 1201];
          console.warn("Rellax: You must pass an array of 3 numbers in ascending order to the breakpoints option. Defaults reverted.");
        }
        
        var a = Object.create(Rellax.prototype),
            scrollTop = 0, scrollLeft = 0,
            viewportHeight = 0, viewportWidth = 0,
            elements = [], initialized = true,
            animationFrame = window.requestAnimationFrame || 
                             window.webkitRequestAnimationFrame || 
                             window.mozRequestAnimationFrame || 
                             window.msRequestAnimationFrame || 
                             window.oRequestAnimationFrame || 
                             function(callback) { return setTimeout(callback, 1000 / 60); },
            animationId = null, isPassiveSupported = false;
        
        // Check for passive event support
        try {
          var passiveTest = Object.defineProperty({}, "passive", {
            get: function() { isPassiveSupported = true; }
          });
          window.addEventListener("testPassive", null, passiveTest);
          window.removeEventListener("testPassive", null, passiveTest);
        } catch (e) {}
        
        var cancelAnimation = window.cancelAnimationFrame || window.mozCancelAnimationFrame || clearTimeout;
        var transformProperty = window.transformProp || (function() {
          var div = document.createElement("div");
          if (div.style.transform === null) {
            var prefixes = ["Webkit", "Moz", "ms"];
            for (var i in prefixes) {
              if (div.style[prefixes[i] + "Transform"] !== undefined) {
                return prefixes[i] + "Transform";
              }
            }
          }
          return "transform";
        })();
        
        // Default options
        a.options = {
          speed: -2,
          verticalSpeed: null,
          horizontalSpeed: null,
          breakpoints: [576, 768, 1201],
          center: false,
          wrapper: null,
          relativeToWrapper: false,
          round: true,
          vertical: true,
          horizontal: false,
          verticalScrollAxis: "y",
          horizontalScrollAxis: "x",
          callback: function() {}
        };
  
        // Merge user options
        if (options) {
          Object.keys(options).forEach(function(option) {
            a.options[option] = options[option];
          });
        }
  
        // Validate breakpoints
        if (options && options.breakpoints) {
          validateBreakpoints();
        }
  
        // Handle elements to animate
        var elements = typeof selector === 'string' ? document.querySelectorAll(selector) : [selector];
  
        if (elements.length > 0) {
          a.elems = elements;
          
          // Handle wrapper element
          if (a.options.wrapper && !a.options.wrapper.nodeType) {
            var wrapperElement = document.querySelector(a.options.wrapper);
            if (wrapperElement) {
              a.options.wrapper = wrapperElement;
            } else {
              console.warn("Rellax: The wrapper you're trying to use doesn't exist.");
              return;
            }
          }
  
          // Initialization logic (resize, scroll handling, and setup)
          var init = function() {
            for (var i = 0; i < elements.length; i++) {
              elements[i].style.cssText = "";  // Reset styles
              elements.push({
                speed: a.options.speed,
                verticalSpeed: a.options.verticalSpeed,
                horizontalSpeed: a.options.horizontalSpeed,
                zindex: elements[i].getAttribute("data-rellax-zindex") || 0
                // Additional properties here...
              });
            }
            handleResize();
          };
  
          // Resize handler
          var handleResize = function() {
            viewportHeight = window.innerHeight;
            viewportWidth = window.innerWidth;
            // Additional resize logic...
          };
  
          // Scroll handler
          var handleScroll = function() {
            // Parallax logic...
          };
  
          // Destroy method to clean up event listeners and reset styles
          a.destroy = function() {
            for (var i = 0; i < elements.length; i++) {
              elements[i].style.cssText = "";  // Reset styles
            }
            cancelAnimation(animationId);  // Cancel animation
          };
  
          // Initialize the library
          init();
          a.refresh = init;  // Refresh method
          return a;
        } else {
          console.warn("Rellax: The elements you're trying to select don't exist.");
        }
      };
  
      return Rellax;
    }
  );
  